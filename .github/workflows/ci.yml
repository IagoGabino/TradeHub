name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies for API
        run: |
          cd api
          npm install

      - name: Install dependencies for Client
        run: |
          cd client
          npm install

      - name: Install wait-on and Cypress
        run: |
          cd client
          npm install wait-on cypress --save-dev
        # Garantir que wait-on e Cypress estejam instalados como dependências de desenvolvimento

      - name: Run API tests
        run: |
          cd api
          npm test

      # Passo único para Linux/macOS: Iniciar API, Client e executar testes
      - name: Start API, Client and Run Tests on Linux/macOS
        if: runner.os != 'Windows'
        run: |
          echo "Starting API and Client on Unix-like OS"

          # Definir a variável de ambiente PORT para a API
          export PORT=3000

          # Iniciar a API em segundo plano
          cd api
          nohup npm start > ../api.log 2>&1 &
          API_PID=$!
          echo "API started with PID $API_PID"

          # Iniciar o Client em segundo plano
          cd ../client
          nohup npm run serve -- --port 8080 --host 0.0.0.0 > ../client.log 2>&1 &
          CLIENT_PID=$!
          echo "Client started with PID $CLIENT_PID"

          # Esperar um pouco para permitir que os serviços iniciem
          sleep 10

          # Verificar se a API está funcionando
          if curl -s http://localhost:3000 > /dev/null; then
            echo "API is up"
          else
            echo "API is not up yet, waiting..."
            npx wait-on --timeout 120000 http://localhost:3000
          fi

          # Verificar se o Client está funcionando
          if curl -s http://localhost:8080 > /dev/null; then
            echo "Client is up"
          else
            echo "Client is not up yet, waiting..."
            npx wait-on --timeout 120000 http://localhost:8080
          fi

          # Executar os testes do Cypress
          # Já estamos no diretório 'client', então não é necessário 'cd client' novamente
          npx cypress run
        shell: bash
        env:
          CI: true
          CYPRESS_BASE_URL: 'http://localhost:8080'
          PORT: 3000  # Definindo a porta para a API

      # Passo único para Windows: Iniciar API, Client e executar testes
      - name: Start API, Client and Run Tests on Windows
        if: runner.os == 'Windows'
        run: |
          Write-Output "Starting API and Client on Windows"

          # Definir a variável de ambiente PORT para a API
          $env:PORT = "3000"

          # Iniciar a API em segundo plano
          Start-Process -NoNewWindow -FilePath "npm" -ArgumentList "start" -WorkingDirectory "api" -RedirectStandardOutput "api.log" -RedirectStandardError "api.log" -PassThru | Out-Null
          Write-Output "API started"

          # Iniciar o Client em segundo plano
          Start-Process -NoNewWindow -FilePath "npm" -ArgumentList "run serve -- --port 8080 --host 0.0.0.0" -WorkingDirectory "client" -RedirectStandardOutput "client.log" -RedirectStandardError "client.log" -PassThru | Out-Null
          Write-Output "Client started"

          # Esperar um pouco para permitir que os serviços iniciem
          Start-Sleep -Seconds 10

          # Verificar se a API está funcionando
          try {
            $apiResponse = Invoke-WebRequest -Uri http://localhost:3000 -UseBasicParsing -ErrorAction Stop
            Write-Output "API is up"
          }
          catch {
            Write-Output "API is not up yet, waiting..."
            npx wait-on --timeout 120000 http://localhost:3000
          }

          # Verificar se o Client está funcionando
          try {
            $clientResponse = Invoke-WebRequest -Uri http://localhost:8080 -UseBasicParsing -ErrorAction Stop
            Write-Output "Client is up"
          }
          catch {
            Write-Output "Client is not up yet, waiting..."
            npx wait-on --timeout 120000 http://localhost:8080
          }

          # Executar os testes do Cypress
          # Já estamos no diretório 'client', então não é necessário 'cd client' novamente
          cd client
          npx cypress run
        shell: powershell
        env:
          CI: true
          CYPRESS_BASE_URL: 'http://localhost:8080'
          PORT: 3000  # Definindo a porta para a API

      # Passo para exibir logs em caso de falha (Linux/macOS)
      - name: Exibir Logs em Caso de Falha (Unix-like)
        if: failure() && runner.os != 'Windows'
        run: |
          echo "=== Logs da API ==="
          cat api.log
          echo "=== Logs do Client ==="
          cat client.log
        shell: bash

      # Passo para exibir logs em caso de falha (Windows)
      - name: Exibir Logs em Caso de Falha (Windows)
        if: failure() && runner.os == 'Windows'
        run: |
          Write-Output "=== Logs da API ==="
          Get-Content api.log
          Write-Output "=== Logs do Client ==="
          Get-Content client.log
        shell: powershell
